spring.application.name=ecommerce
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
# URL anterior comentada. Agora usando placeholder que permite override por env var no Docker ou fallback local.
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/ecommerce_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:root}
projects.image=src/main/resources/static/images/
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
jwt.secret=mY7F1c9q8vWoB2E5vJ4z8L6gEx9YtNg8aH7R2Cj1pT0=
jwt.expiration=14400000
spring.ecom.app.jwtCookieName=springboot-jwt
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.yanvelasco.ecommerce=DEBUG
FRONT_END_URL=http://localhost:5173/
spring.web.resources.static-locations=classpath:/static/images/
image.base.url=http://localhost:8080/images